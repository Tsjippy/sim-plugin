{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://admin/../../forms/js/forms.js","webpack://admin/./admin.js"],"sourcesContent":["async function saveFormInput(target){\n\tlet form\t\t= target.closest('form');\n\tlet response\t= await FormSubmit.submitForm(target, 'forms/save_form_input');\n\n\tif(response){\n\t\ttarget.closest('.submit_wrapper').querySelector('.loadergif').classList.add('hidden');\n\n\t\tMain.displayMessage(response);\n\n\t\tif(form.dataset.reset == 'true'){\n\t\t\tFormSubmit.formReset(form);\n\t\t}\n\t}\n}\n\nexport function removeDefaultSelect(el){\n\tArray.from(el.options).forEach(function(option){\n\t\toption.defaultSelected = false;\n\t});\n}\n\nlet tinymceSettings = [];\nfunction prepareForCloning(originalNode){\n\t//First remove any nice selects\n\toriginalNode.querySelectorAll('select').forEach(select => {\n\t\t//remove defaults if it has changed\n\t\tif(select.selectedIndex != -1){\n\t\t\tif(!select.options[select.selectedIndex].defaultSelected){\n\t\t\t\t//remove all default selected\n\t\t\t\tremoveDefaultSelect(select);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Then add a new default selected if needed\n\t\tif(select.selectedOptions.length>0){\n\t\t\tselect.selectedOptions[0].defaultSelected = true;\n\t\t}\n\t\t\n\t\t//remove the original\n\t\tselect._niceselect.destroy()\n\t});\n\n\t//also remove any tinymce's\n\tif(typeof(tinymce) != 'undefined'){\n\t\toriginalNode.querySelectorAll('.wp-editor-area').forEach(el =>{\n\t\t\tlet tn = tinymce.get(el.id);\n\t\t\tif(tn != null){\n\t\t\t\ttinymceSettings[el.id] = tn.settings\n\t\t\t\ttn.save();\n\t\t\t\ttn.remove();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function cloneNode(originalNode, clear=true){\n\tprepareForCloning(originalNode);\n\t\n\t//make a clone\n\tlet newNode = originalNode.cloneNode(true);\n\t\n\t//Then add niceselects again after cloning took place\n\toriginalNode.querySelectorAll('select').forEach(select => {\n\t\tselect._niceselect = NiceSelect.bind(select,{searchable: true});\n\t\tif(select.value == ''){\n\t\t\tselect._niceselect.clear();\n\t\t}\n\t});\n\t\n\t//add tinymce's again\n\toriginalNode.querySelectorAll('.wp-editor-area').forEach(el =>{\n\t\ttinymce.init(tinymceSettings[el.id]);\n\t});\n\t\n\t//clear values in the clone\n\tif(clear){\n\t\tnewNode.querySelectorAll('input,select,textarea').forEach(input => {\n\t\t\tif(input.type == 'checkbox' || input.type == 'radio'){\n\t\t\t\tinput.checked = false;\n\t\t\t}else if(input.type != 'hidden'){\n\t\t\t\tinput.value = \"\";\n\t\t\t}\n\t\t\t\n\t\t\t//if this is a select\n\t\t\tif(input.type == \"select-one\"){\n\t\t\t\t//remove any defaults\n\t\t\t\tremoveDefaultSelect(input);\n\t\t\t\t\n\t\t\t\tinput._niceselect = NiceSelect.bind(input,{searchable: true});\n\t\t\t\tinput._niceselect.clear();\n\t\t\t}\n\t\t});\n\t}else{\n\t\tnewNode.querySelectorAll('select').forEach(select => {\n\t\t\tselect._niceselect = NiceSelect.bind(select,{searchable: true});\n\t\t});\n\t}\n\t\n\treturn newNode;\n}\n\nexport function copyFormInput(originalNode){\n\tlet newNode = cloneNode(originalNode);\n\t\n\t//update the data index\n\tnewNode.querySelectorAll('.upload-files').forEach(function(uploadButton){\n\t\tuploadButton.dataset.index = nodeNr;\n\t})\n\t\n\t//Clear contents of any document preview divs.\n\tnewNode.querySelectorAll('.documentpreview').forEach(function(previewDiv){\n\t\tpreviewDiv.innerHTML = '';\n\t});\n\n\t//Select\n\tlet i = 0;\n\tnewNode.querySelectorAll('select').forEach(select => {\n\t\t//Find the value of the select we have cloned\n\t\tlet previousVal = originalNode.getElementsByTagName('select')[i].selectedIndex;\n\t\t\n\t\t//Hide the value in the clone\n\t\tselect.options[previousVal].style.display = 'none';\n\t\t\n\t\t//Add nice select\n\t\tselect._niceselect.update();\n\t\t\n\t\tselect.nextSibling.querySelector('.current').textContent = 'Select an option';\n\t\t\n\t\ti++;\n\t});\n\t\n\t//Add remove buttons if they are not there\n\tif(originalNode.querySelector('.remove') == null){\n \t\tlet addElement \t\t= newNode.querySelector('.add');\n\t\tlet elementClass \t= addElement.className.replace('add','remove');\n\t\tlet id \t\t\t\t= addElement.id.replace('add','remove');\n\t\tlet content \t\t= addElement.textContent.replace('Add','Remove this').replace('an','').replace('+','-');\n\t\t\n\t\tlet html = `<button type=\"button\" class=\"${elementClass}\" id=\"${id}\" style=\"flex: 1;\">${content}</button>`;\n\t\t\n\t\t//Add minus button to the first div\n\t\toriginalNode.querySelector('.buttonwrapper').insertAdjacentHTML('beforeend', html);\n\t\t//Add minus button to the second div\n\t\tnewNode.querySelector('.buttonwrapper').insertAdjacentHTML('beforeend', html)\n\t}\t\n\t\n\t//Insert the clone\n\toriginalNode.parentNode.insertBefore(newNode, originalNode.nextSibling);\n\t\n\treturn newNode;\n}\n\nexport function fixNumbering(cloneDivsWrapper){\n\tcloneDivsWrapper.querySelectorAll(':scope > .clone_div').forEach((clone, index)=>{\n\t\t//Update the new number\t\n\t\t//DIV\n\t\tif(clone.id != ''){\n\t\t\tclone.id = clone.id.replace(/(\\d)/g, index);\n\t\t}\n\t\t\n\t\tif(clone.dataset.divid  != null){\n\t\t\tclone.dataset.divid = index;\n\t\t}\n\t\t\n\t\t//Update the title\n\t\tclone.querySelectorAll('h3, h4').forEach(title => {\n\t\t\ttitle.textContent = title.textContent.replace(/(\\d)/g, index+1);\n\t\t});\n\t\t\n\t\t//Update the legend\n\t\tclone.querySelectorAll('legend').forEach(legend => {\n\t\t\tlegend.innerHTML = legend.innerHTML.replace(/ (\\d)/g, ' '+(index+1));\n\t\t});\n\t\t\n\t\t//Update the elements\n\t\tclone.querySelectorAll('input,select,textarea').forEach(input => {\n\t\t\t//Do not copy nice selects\n\t\t\tif(!input.classList.contains('nice-select-search')){\n\t\t\t\t//Update the id\n\t\t\t\tif(input.id != '' && input.id != undefined){\n\t\t\t\t\tinput.id = input.id.replace(/(\\d)/g, index);\n\t\t\t\t}\n\t\t\t\t//Update the name\n\t\t\t\tif(input.name != '' && input.name != undefined){\n\t\t\t\t\tinput.name = input.name.replace(/(\\d)/g, index);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Reset the select to the default\n\t\t\t\tif(input.type == 'button'){\n\t\t\t\t\tinput.value = input.value.replace(/\\d/g, index);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t})\n}\n\nexport function removeNode(target){\n\tlet node\t\t\t= target.closest(\".clone_div\");\n\tlet parentNode\t\t= node.closest('.clone_divs_wrapper');\n\tlet allCloneDivs\t= parentNode.querySelectorAll('.clone_div');\n\t\n\t//Check if we are removing the last element\n\tif(allCloneDivs[allCloneDivs.length-1] == node){\n\t\tlet addElement = node.querySelector(\".add\");\n\t\t\n\t\t//Move the add button one up\n\t\tlet prev = node.previousElementSibling;\n\t\tprev.querySelector('.buttonwrapper').appendChild(addElement);\n\t}\n\t\n\t//Remove the node\n\tnode.remove();\n\n\t//If there is only one div remaining, remove the remove button\n\tif(parentNode.querySelectorAll('.clone_div').length == 1){\n\t\tlet removeElement = parentNode.querySelector('.remove');\n\t\tremoveElement.remove();\n\t}\n\n\tfixNumbering(parentNode)\n}\n\n/* \n\tFUNCTIONS USED BY DYNAMIC FORMS JS\n */\nexport function tidyMultiInputs(){\n\t//remove unnecessary buttons on inputs with multiple values\n\tdocument.querySelectorAll('.clone_divs_wrapper').forEach(function(div){\n\t\tlet cloneDivArr\t= div.querySelectorAll('.clone_div');\n\t\t\n\t\tif(cloneDivArr.length == 1){\n\t\t\tcloneDivArr[0].querySelectorAll('.remove').forEach(el=>el.remove());\n\t\t}\n\t\t\n\t\tcloneDivArr.forEach(function(cloneDiv, index, array){\n\t\t\t//update dataset\n\t\t\tcloneDiv.dataset.divid = index;\n\t\t\t\n\t\t\t//remove add button for all but the last\n\t\t\tif(index != array.length - 1){\n\t\t\t\tcloneDiv.querySelectorAll('.add').forEach(el=>el.remove());\n\t\t\t}\n\t\t})\n\t});\n}\n\t\n//show a next form step\nexport function showTab(n, form) {\n\tif(typeof(form) != 'undefined'){\n\t\tif(n == 0){\n\t\t\tlet loader = form.querySelector('.formsteploader');\n\t\t\t//hide loader\n\t\t\tif(loader != null){\n\t\t\t\tloader.classList.add('hidden');\n\t\t\t\n\t\t\t\t//show form controls\n\t\t\t\tform.querySelector('.multistepcontrols').classList.remove('hidden');\n\t\t\t}\n\t\t}\n\t\t\n\t\t//hide all formsteps\n\t\tform.querySelectorAll('.formstep:not(.stephidden)').forEach(step=>step.classList.add('stephidden'));\n\t\t\n\t\t// Show the specified formstep of the form ...\n\t\tlet x = form.getElementsByClassName(\"formstep\");\n\t\t\n\t\tif(x.length == 0){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//scroll back to top\n\t\tlet y = x[n].offsetTop - document.querySelector(\"#masthead\").offsetHeight\n\t\twindow.scrollTo({ top: y, behavior: 'auto'});\n\t\t\n\t\t//show\n\t\tx[n].classList.remove('stephidden');\n\n\t\t// This function removes the \"active\" class of all steps...\n\t\tform.querySelectorAll(\".step.active\").forEach(el=>{el.classList.remove('active');});\n\n\t\t//... and adds the \"active\" class to the current step:\n\t\tx = form.getElementsByClassName(\"step\");\n\t\tx[n].classList.add(\"active\");\n\n\t\t// ... and fix the Previous/Next buttons:\n\t\tif (n == 0) {\n\t\t\tform.querySelector('[name=\"prevBtn\"]').classList.add('hidden');\n\t\t} else {\n\t\t\tform.querySelector('[name=\"prevBtn\"]').classList.remove('hidden');\n\t\t}\n\n\t\tif (n == (x.length - 1)) {\n\t\t\tform.querySelector('[name=\"nextBtn\"]').classList.add('hidden');\n\t\t\tform.querySelector('.form_submit').classList.remove('hidden');\n\t\t} else {\n\t\t\tform.querySelector('[name=\"nextBtn\"]').classList.remove('hidden');\n\t\t\tform.querySelector('.form_submit').classList.add('hidden');\n\t\t}\n\t}else{\n\t\tconsole.log('no form defined');\n\t}\n\t\t\n}\n\n//next form step clicked\nexport function nextPrev(n) {\n\t// This function will figure out which tab to display\n\tlet x \t\t\t\t= form.querySelectorAll(\".formstep\");\n\tlet stepIndicators\t= form.querySelectorAll(\".step\");\n\tlet currentTab\t\t= 0;\n\tlet valid;\n\n\t// Find the current active tab\n\tx.forEach((el, index)=>{if(!el.matches('.stephidden')){currentTab = index}});\n\t\n\t//Check validity of this step if going forward\n\tif(n>0){\n\t\t// Report validity of each required field\n\t\tlet elements\t= x[currentTab].querySelectorAll('.required:not(.hidden) input, .required:not(.hidden) textarea, .required:not(.hidden) select');\n\t\tfor(const element of elements) {\n\t\t\telement.required\t\t= true;\n\t\t\tvalid\t\t= element.reportValidity();\n\t\t\tif(!valid){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(!valid) return;\n\t\t\n\t\t//mark the last step as finished\n\t\tstepIndicators[currentTab].classList.add(\"finish\");\n\t}else{\n\t\t//mark the last step as unfinished\n\t\tstepIndicators[currentTab].classList.remove(\"finish\");\n\t}\n\t\n\t//loop over all the formsteps to hide stepindicators of them if needed\n\tArray.from(x).forEach((formstep,index) =>{\n\t\tif(formstep.classList.contains('hidden')){\n\t\t\t//hide the corresponding circle\n\t\t\tstepIndicators[index].classList.add('hidden');\n\t\t}\n\t});\n\n\t// Increase or decrease the current tab by 1:\n\tcurrentTab = currentTab + n;\n\t\n\t//check if the next tab is hidden\n\twhile(x[currentTab].classList.contains('hidden')){\n\t\t//go to the next tab\n\t\tcurrentTab = currentTab + n;\n\t}\n\t\n\t// if you have reached the end of the form... :\n\tif (currentTab >= x.length) {\n\t\treturn false;\n\t}\n\t// Otherwise, display the correct tab:\n\tshowTab(currentTab,form);\n}\n\nfunction getRadioValue(form, name){\n\tlet el\t= form.querySelector(`[name='${name}' i]:checked`);\n\n\t//There is no radio selected currently\n\tif(el == null){\n\t\t//return an empty value\n\t\treturn '';\n\t}\n\n\treturn el.value;\n}\n\nfunction getCheckboxValue(form, name, compareValue, orgName){\n\tlet value\t\t= '';\n\tlet elements\t= '';\n\n\t//we are dealing with a specific checkbox\n\tif(orgName.type == 'checkbox' ){\n\t\tif(el.checked){\n\t\t\treturn el.value;\n\t\t}\n\t\t\n\t\treturn '';\n\t}\n\n\t//we should find the checkbox with this value and check if it is checked\n\tif(compareValue != null){\n\t\telements\t= form.querySelector(`[name='${name}' i][value=\"${compareValue}\" i]:checked`);\n\t\tif(elements != null){\n\t\t\tvalue = compareValue;\n\t\t}\n\t//no compare value give just return all checked values\n\t}else{\n\t\telements\t= form.querySelectorAll(`[name=\"${name}\" i]:checked`);\n\t\t\n\t\telements.forEach(el=>{\n\t\t\tif(value != ''){\n\t\t\t\tvalue += ', ';\n\t\t\t}\n\t\t\tvalue += el.value;\n\t\t});\n\t}\n\n\treturn value;\n}\n\nfunction getDataListValue(el){\n\tlet value\t\t= '';\n\tlet origInput \t= el.list.querySelector(\"[value='\"+el.value+\"' i]\");\n\t\t\t\n\tif(origInput == null){\n\t\tvalue =  el.value;\n\t}else{\n\t\tvalue = origInput.dataset.value;\n\t\tif(value == ''){\n\t\t\tvalue =  el.value;\n\t\t}\n\t}\n\n\treturn value;\n}\n\nexport function getFieldValue(orgName, form, checkDatalist=true, compareValue=null, lowercase=false){\n\tlet el\t\t= ''; \n\tlet name\t= '';\n\tlet value \t= '';\n\n\t//name is not a name but a node\n\tif(orgName instanceof Element){\n\t\tel\t\t\t= orgName;\t\t\n\t\t//check if valid input type\n\t\tif(el.tagName != 'INPUT' && el.tagName != 'TEXTAREA' && el.tagName != 'SELECT' && el.closest('.nice-select-dropdown') == null){\n\t\t\tel = el.querySelector('input, select, textarea');\n\t\t}\n\t\tif(el == null){\n\t\t\tel\t\t\t= orgName;\n\t\t}\n\t\tname\t\t= el.name;\n\t}else{\n\t\tname\t\t= orgName;\n\t\tel\t\t\t= form.querySelector(`[name='${name}' i]`);\n\t}\n\t\n\tif(el == null){\n\t\tconsole.trace();\n\t\tconsole.log(\"cannot find element with name \"+name);\n\n\t\treturn value;\n\t}\n\n\tif(el.type == 'radio'){\n\t\tvalue\t= getRadioValue(form, name);\n\t}else if(el.type == 'checkbox'){\n\t\tvalue\t= getCheckboxValue(form, name, compareValue, orgName);\t\n\t}else if(el.closest('.nice-select-dropdown') != null && el.dataset.value != undefined){\n\t\t//nice select\n\t\tvalue = el.dataset.value\n\t}else if(el.list != null && checkDatalist){\n\t\tvalue =  getDataListValue(el);\n\t}else if(el.value != null && el.value != 'undefined'){\n\t\tvalue = el.value;\n\t}\n\t\n\tif(lowercase){\n\t\treturn value.toLowerCase();\n\t}\n\treturn value;\n}\n\nfunction findcheckboxTarget(form, name, value){\n\tlet targets = form.querySelectorAll(`[name=\"${name}\" i]`);\n\tfor (const element of targets) {\n\t\tif(element.value.toLowerCase() == value.toLowerCase()){\n\t\t\treturn element;\n\t\t}\n\t}\n}\n\nexport function changeFieldValue(orgName, value, functionRef){\n\tlet name\t= '';\n\tlet target\t= '';\n\n\tif(orgName instanceof Element){\n\t\tname\t= orgName.name;\n\t\ttarget\t= orgName;\n\t}else{\n\t\tname \t= orgName;\n\t\t//get the target\n\t\ttarget \t= form.querySelector(`[name=\"${name}\" i]`);\n\t}\n\t\n\tif(target.type == 'radio' || target.type == 'checkbox'){\n\t\tif(!(orgName instanceof Element)){\n\t\t\ttarget\t= findcheckboxTarget(form, name, value);\n\t\t}\n\t\t\n\t\tif(target.value.toLowerCase() == value.toLowerCase()){\n\t\t\ttarget.checked = true;\n\t\t}\n\t//the target has a list attached to it\n\t}else if(target.list != null){\n\t\tlet dataListOption = target.list.querySelector(`[data-value=\"${value}\" i]`);\n\n\t\t//we found a match\n\t\tif(dataListOption != null){\n\t\t\ttarget.value = dataListOption.value;\n\t\t}else{\n\t\t\ttarget.value = value;\n\t\t}\n\t}else{\n\t\ttarget.value = value;\n\t}\n\t\n\t//create a new event\n\tlet evt = new Event('input');\n\t//attach the target\n\ttarget.dispatchEvent(evt);\n\t\n\t//run the originating function with this event\n\tfunctionRef(target);\n}\n\nexport function changeFieldProperty(name, att, value, functionRef){\n\t//first change the value\n\tlet target = form.querySelector(`[name=\"${name}\" i]`);\n\t\n\tform.querySelector(`[name=\"${name}\"]`)[att] = value;\n\t\n\t//create a new event\n\tlet evt = new Event('input');\n\n\t//attach the target\n\ttarget.dispatchEvent(evt);\n\n\t//run the originating function with this event\n\tfunctionRef(target);\n}\n\n//Main code\ndocument.addEventListener(\"DOMContentLoaded\",function() {\n\tconsole.log('Forms.js is loaded');\n});\n\n//we are online again\nwindow.addEventListener('online',function(){\n\tdocument.querySelectorAll('.form_submit').forEach(btn=>{\n\t\tbtn.disabled = false\n\t\tbtn.querySelectorAll('.offline').forEach(el=>el.remove());\n\t});\n});\n\n//prevent form submit when offline\nwindow.addEventListener('offline',function(){\n\tdocument.querySelectorAll('.form_submit').forEach(btn=>{\n\t\tbtn.disabled = true;\n\t\tif(btn.querySelector('.online') == null){\n\t\t\tbtn.innerHTML = '<div class=\"online\">'+btn.innerHTML+'</div>';\n\t\t}\n\t\tbtn.innerHTML += '<div class=\"offline\">You are offline</div>'\n\t});\n});\n\ndocument.addEventListener('click',function(event) {\n\tlet target = event.target;\n\t\n\t//add element\n\tif(target.matches('.add')){\n\t\tlet newNode = copyFormInput(target.closest(\".clone_div\"));\n\n\t\tfixNumbering(target.closest('.clone_divs_wrapper'));\n\n\t\t//add tinymce's can only be done when node is inserted and id is unique\n\t\tnewNode.querySelectorAll('.wp-editor-area').forEach(el =>{\n\t\t\twindow.tinyMCE.execCommand('mceAddEditor',false, el.id);\n\t\t});\n\n\t\ttarget.remove();\n\t}\n\t\n\t//remove element\n\tif(target.matches('.remove')){\n\t\t//Remove node clicked\n\t\tremoveNode(target);\n\t}\n\n\tif(target.matches('.sim_form [name=\"submit_form\"]')){\n\t\tevent.stopPropagation();\n\t\t\n\t\tsaveFormInput(target);\n\t}\n});","import {copyFormInput, fixNumbering, removeNode} from '../../forms/js/forms.js'\r\n\r\ndocument.addEventListener('click',function(event) {\r\n\tlet target = event.target;\r\n\t\r\n\t//add element\r\n\tif(target.matches('.add')){\r\n\t\tlet newNode = copyFormInput(target.closest(\".clone_div\"));\r\n\r\n\t\tfixNumbering(target.closest('.clone_divs_wrapper'));\r\n\r\n\t\ttarget.remove();\r\n\t}\r\n\t\r\n\t//remove element\r\n\tif(target.matches('.remove')){\r\n\t\t//Remove node clicked\r\n\t\tremoveNode(target);\r\n\t}\r\n});"],"names":["removeDefaultSelect","el","Array","from","options","forEach","option","defaultSelected","tinymceSettings","copyFormInput","originalNode","newNode","clear","querySelectorAll","select","selectedIndex","selectedOptions","length","_niceselect","destroy","tn","tinymce","get","id","settings","save","remove","prepareForCloning","cloneNode","NiceSelect","bind","searchable","value","init","input","type","checked","uploadButton","dataset","index","nodeNr","previewDiv","innerHTML","i","previousVal","getElementsByTagName","style","display","update","nextSibling","querySelector","textContent","addElement","html","className","replace","insertAdjacentHTML","parentNode","insertBefore","fixNumbering","cloneDivsWrapper","clone","divid","title","legend","classList","contains","undefined","name","removeNode","target","node","closest","allCloneDivs","previousElementSibling","appendChild","document","addEventListener","console","log","window","btn","disabled","event","matches","tinyMCE","execCommand","stopPropagation","async","form","response","FormSubmit","submitForm","add","Main","displayMessage","reset","formReset","saveFormInput"],"sourceRoot":""}