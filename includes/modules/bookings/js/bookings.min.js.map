{"version":3,"file":"bookings.min.js","mappings":"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","sources":["webpack://bookings/./bookings.js"],"sourcesContent":["function reset(modal, onlyEnd=false, skipRoomSelector=true){\r\n    if(!onlyEnd){\r\n        modal.querySelector('.booking-startdate').value     = '';\r\n        modal.querySelectorAll('.calendar.day.startdate').forEach(el => el.classList.remove('startdate'));\r\n        modal.querySelectorAll('.available.unavailable').forEach(dt => dt.classList.remove('unavailable'));\r\n\r\n        modal.querySelector('.booking-date-label-wrapper.enddate').classList.add('disabled')\r\n    }\r\n    modal.querySelector('.booking-enddate').value       = '';\r\n    \r\n    modal.querySelectorAll('.calendar.day.enddate').forEach(el => el.classList.remove('enddate'));\r\n\r\n    modal.querySelectorAll('.inbetween').forEach(dt => dt.classList.remove('inbetween'));    \r\n\r\n    if(!skipRoomSelector){\r\n        modal.querySelectorAll('.room-selector').forEach(el => el.checked=false);    \r\n\r\n        if(modal.querySelectorAll('.room-selector').length > 1){\r\n            modal.querySelectorAll('.roomwrapper:not(.hidden)').forEach(el => el.classList.add('hidden'));\r\n        }\r\n    }\r\n}\r\n\r\nasync function getMonth(target){\r\n    let wrapper         = target.closest('.bookings-wrap');\r\n    let monthContainers = wrapper.querySelectorAll(`.month-container[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`);\r\n    let type;\r\n\r\n    // we clicked the previous button\r\n    if(target.closest('.prev') != null){\r\n        type    = 'prev';\r\n        // hide every second calendar, so that we can show a new calendar to the left\r\n        wrapper.querySelectorAll('.calendar.table .month-container:not(.hidden)').forEach(\r\n            (el, index) => {\r\n                if(index % 2 != 0){ // uneven index\r\n                    el.classList.add('hidden');\r\n                }\r\n            }\r\n        );\r\n    }else{\r\n        type    = 'next';\r\n\r\n        // hide every first calendar, so that we can show a new calendar to the right\r\n        wrapper.querySelectorAll('.calendar.table .month-container:not(.hidden)').forEach(\r\n            (el, index) => {\r\n                if(index % 2 == 0){ // even index\r\n                    el.classList.add('hidden');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // month does not exist yet, request the data\r\n    if(monthContainers.length == 0){\r\n        let formData    = new FormData();\r\n        formData.append('month', target.dataset.month);\r\n        formData.append('year', target.dataset.year);\r\n        formData.append('subject', wrapper.dataset.subject);\r\n        formData.append('formid', wrapper.dataset.formid);\r\n        formData.append('type', type);\r\n        if(wrapper.dataset.elid != undefined){\r\n            formData.append('elid', wrapper.dataset.elid);\r\n        }\r\n        if(wrapper.dataset.shortcodeid != undefined){\r\n            formData.append('shortcode_id', wrapper.dataset.shortcodeid);\r\n        }\r\n\r\n        let loaderWrapper\t= document.createElement(\"DIV\");\r\n        loaderWrapper.setAttribute('class','loaderwrapper');\r\n\r\n        let loader\t= document.createElement(\"IMG\");\r\n        loader.setAttribute(\"src\", sim.loadingGif);\r\n\r\n        loaderWrapper.insertAdjacentElement('beforeEnd', loader);\r\n\r\n        let position    = '';\r\n        if(type == 'prev'){\r\n            // insert the loader at the left\r\n            position    = 'afterBegin';\r\n        }else{\r\n            position    = 'beforeEnd';\r\n        }\r\n        wrapper.querySelectorAll('.calendar.table .roomwrapper>div').forEach(div=>{\r\n            let clone   = loaderWrapper.cloneNode(true);\r\n            div.insertAdjacentElement(position, clone);\r\n        });\r\n            \r\n        let response = await FormSubmit.fetchRestApi('bookings/get_next_month', formData);\r\n\r\n        if(response){\r\n            // add the new months to each room\r\n            wrapper.querySelectorAll('.roomwrapper').forEach((el, index)=>{\r\n                el.querySelector('.loaderwrapper').outerHTML        = response.months[index];\r\n            });\r\n\r\n            // hide current navigator and add new one\r\n            wrapper.querySelector('.navigators .navigator:not(.hidden)').classList.add('hidden');\r\n            wrapper.querySelector('.navigators').insertAdjacentHTML('beforeEnd', response.navigator);\r\n            wrapper.querySelector('.booking.details-wrapper').insertAdjacentHTML('beforeEnd', response.details);\r\n        }\r\n    }else{\r\n        console.log(monthContainers);\r\n        // hide the current navigator\r\n        wrapper.querySelector('.navigators .navigator:not(.hidden)').classList.add('hidden');\r\n\r\n        // show the new one\r\n        console.log(wrapper);\r\n        console.log(target);\r\n        wrapper.querySelector(`.navigator[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`).classList.remove('hidden');\r\n        \r\n        // Show the month calendar\r\n        monthContainers.forEach(el=>el.classList.remove('hidden'));\r\n    }\r\n}\r\n\r\nasync function approve(target){    \r\n    let formData    = new FormData();\r\n    formData.append('id', target.dataset.id);\r\n    formData.append('formid', target.dataset.formid);\r\n\r\n    let row         = target.closest('tr');\r\n\r\n    let cell        = target.closest('td');\r\n\r\n    let initContent = cell.outerHTML;\r\n\r\n    Main.showLoader(cell);\r\n        \r\n    let response = await FormSubmit.fetchRestApi('bookings/approve', formData);\r\n\r\n    if(response){\r\n\r\n        // Remove table if empty\r\n        if(row.closest('tbody').rows.length == 1){\r\n            row.closest('table').remove()\r\n        }else{\r\n            // remove the row\r\n            row.remove();\r\n        }\r\n\r\n        Main.displayMessage(response.message);\r\n\r\n        let building        = response.subject.split(';')[0];\r\n        let room            = response.subject.split(';')[1];\r\n        let querySelector   = `.bookings-wrap[data-subject='${building}']`;\r\n\r\n        if(room != undefined){\r\n            querySelector   += ` .roomwrapper[data-room='${room}']`;\r\n        }\r\n\r\n        let subjectWrapper  = document.querySelector(querySelector);\r\n\r\n        for (let i = 0; i < response.months.length; i++) {\r\n            // Get the calendar\r\n            subjectWrapper.querySelectorAll(`.month-container[data-month='${response.months[i]}'][data-year='${response.years[i]}']`).forEach(el=>el.outerHTML   = response.html);\r\n        }\r\n\r\n        // Add the details\r\n        subjectWrapper.closest('.bookings-wrap').querySelector(`.booking.details-wrapper`).insertAdjacentHTML('beforeEnd', response.details);\r\n        \r\n    }else{\r\n        row.querySelector('.loaderwrapper').outerHTML  = initContent;\r\n    }\r\n}\r\n\r\nasync function remove(target){    \r\n    let formData    = new FormData();\r\n    formData.append('id', target.dataset.id);\r\n    let row         = target.closest('tr');\r\n\r\n    Main.showLoader(target.closest('td'));\r\n        \r\n    let response = await FormSubmit.fetchRestApi('bookings/remove', formData);\r\n\r\n    if(response){\r\n        // Remove table if empty\r\n        if(row.closest('tbody').rows.length == 1){\r\n            row.closest('table').remove()\r\n        }else{\r\n            // remove the row\r\n            row.remove();\r\n        }\r\n\r\n        Main.displayMessage(response);\r\n    }\r\n}\r\n\r\nfunction changeBookingData(target){\r\n    let selector;\r\n    let el  = document.querySelector(`.booking-subject-selector:checked`);\r\n    if(el == null){\r\n        selector    = '.booking.modal';\r\n        console.log(selector);\r\n    }else{\r\n        selector    = `[name=\"${el.value}-modal\"]`;\r\n        console.log(selector);\r\n    }\r\n\r\n    Main.showModal(document.querySelector(selector));\r\n}\r\n\r\nfunction storeDates(target){\r\n    let modal   = target.closest('.modal');\r\n\r\n    // remove all previous dates\r\n    target.closest('form').querySelectorAll('.selected-booking-dates .clone_div').forEach((el, index)=>{\r\n        if(index>0){\r\n            el.remove();\r\n        }\r\n    });\r\n\r\n    let parent          = target.closest('form').querySelector('.selected-booking-dates');\r\n    let original        = parent.querySelector('.clone_div');\r\n\r\n    // set values and create clones\r\n    modal.querySelectorAll('.startdate').forEach((el, index)=>{\r\n        let clone\t\t= original;\r\n\r\n        if(index > 0){\r\n            clone\t\t= FormFunctions.cloneNode(original);\r\n        }\r\n    \r\n        let startEl     = clone.querySelector('[name^=\"booking-startdate\"]');\r\n        let endEl       = clone.querySelector('[name^=\"booking-enddate\"]');\r\n        let roomEl      = clone.querySelector('[name^=\"booking-room\"]');\r\n        let room        = el.closest('.roomwrapper').dataset.room;\r\n\r\n        startEl.value   = el.dataset.isodate;\r\n        endEl.value     = modal.querySelectorAll('.day.enddate')[index].dataset.isodate;\r\n\r\n        if(room == undefined){\r\n            roomEl.closest('div').classList.add('hidden');\r\n            roomEl.value    = '';\r\n        }else{\r\n            roomEl.closest('div').classList.remove('hidden');\r\n            roomEl.value    = room;\r\n        }\r\n\r\n        parent.insertAdjacentElement('beforeEnd', clone);\r\n        \r\n        FormFunctions.fixNumbering(parent);\r\n    });\r\n\r\n    parent.classList.remove('hidden');\r\n\r\n    Main.hideModals();\r\n\r\n    target.closest('form').querySelector('.change-booking-date').textContent    = 'Change';\r\n\r\n    target.closest('form').querySelector('.change-booking-date').classList.remove('hidden');\r\n\r\n    reset(modal, false, false);\r\n}\r\n\r\nfunction daySelected(target){ \r\n    let modal   = target.closest('.modal');\r\n\r\n    if(modal == null){\r\n        return;\r\n    }\r\n\r\n    let roomWrapper = target.closest('.roomwrapper');\r\n\r\n    // remove previous selection\r\n    if(roomWrapper.querySelector('.calendar.day.startdate') != null && roomWrapper.querySelector('.calendar.day.enddate') != null){\r\n        let onlyEnd = false;\r\n        if(target.matches('.inbetween')){\r\n            onlyEnd = true;\r\n        }\r\n        \r\n        reset(modal, onlyEnd);\r\n    }\r\n\r\n    // start selection\r\n    if(roomWrapper.querySelector('.calendar.day.startdate') == null){\r\n        // the selected cell is the first day of an already booked period\r\n        if(target.matches('.first-day')){\r\n            Main.displayMessage('You can only select this day as the last day of your stay!', 'error');\r\n            return;\r\n        }\r\n\r\n        modal.querySelector('.booking-startdate').value               = target.dataset.date;\r\n        modal.querySelector('.booking-startdate').dataset.isodate     = target.dataset.isodate;\r\n        target.classList.add('startdate');\r\n        roomWrapper.querySelectorAll('.booking-date-label-wrapper.disabled').forEach(el=>el.classList.remove('disabled'));\r\n\r\n        // do not allow any date before the startdate to be the enddate\r\n        let dts     = roomWrapper.querySelectorAll('dt.calendar.day:not(.head, .unavailable)');\r\n        let skip    = false;\r\n        for (i = 0; i < dts.length; ++i) {\r\n            // all dates after the booked date are available\r\n            if(dts[i] == target){\r\n                skip = true;\r\n            // until we encounter another booked date\r\n            }else if(skip && dts[i].matches('.booked:not(.available)')){\r\n                skip = false;\r\n            }\r\n\r\n            if(!skip){\r\n                dts[i].classList.add('unavailable');\r\n            }\r\n        }\r\n    }else{\r\n        // the selected cell is the first day of an already booked period\r\n        if(target.matches('.last-day')){\r\n            Main.displayMessage('You can only select this day as the first day of your stay!', 'error');\r\n            return;\r\n        }\r\n\r\n        // store enddate\r\n        modal.querySelector('.booking-enddate').value               = target.dataset.date;\r\n        modal.querySelector('.booking-enddate').dataset.isodate     = target.dataset.isodate;\r\n        target.classList.add('enddate');\r\n\r\n        // color the dates between start and end\r\n        let dts     = roomWrapper.querySelectorAll('dt.calendar.day:not(.head)');\r\n        let skip    = true;\r\n        for (i = 0; i < dts.length; ++i) {\r\n            \r\n            // until we encounter another booked date\r\n            if(dts[i] == target){\r\n                break;\r\n            }\r\n\r\n            if(!skip){\r\n                dts[i].classList.add('inbetween');\r\n            }\r\n\r\n            // all dates after the booked date are available\r\n            if(dts[i].matches('.startdate')){\r\n                skip = false;\r\n            }\r\n        }\r\n\r\n        // make other dates available again\r\n        //roomWrapper.querySelectorAll('.available.booked:not(.enddate, .startdate, .inbetween)').forEach(dt=>dt.classList.remove('booked'));\r\n\r\n        //check if overlapping an existing booking\r\n        if(target.closest('.calendar.table').querySelectorAll('.inbetween.first-day, .inbetween.last-day').length > 0){\r\n            Main.displayMessage('You can not book this period as it is overlapping an existing booking!', 'error');\r\n\r\n            reset(modal);\r\n\r\n            return;\r\n        }\r\n\r\n        modal.querySelectorAll('.actions .action.disabled').forEach(el=>el.classList.remove('disabled'));\r\n    }\r\n}\r\n\r\nfunction roomSelected(target){\r\n\r\n    let modal   = target.closest('.modal');\r\n\r\n    if(modal == null){\r\n        modal = target.closest('.booking.overview'); // when viewing the results\r\n    }\r\n\r\n    if(modal == null){\r\n        return;\r\n    }\r\n\r\n    // show date warning\r\n    modal.querySelectorAll(`.booking-date-wrapper.hidden`).forEach(el=>el.classList.remove('hidden'));\r\n\r\n    // show month navigator\r\n    modal.querySelectorAll(`.navigators.hidden`).forEach(el=>el.classList.remove('hidden'));\r\n\r\n    // Show the selected room\r\n    modal.querySelectorAll(`[data-room=\"${target.value}\"]`).forEach(el=>el.classList.toggle('hidden'));\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"Bookings.js loaded\");\r\n\r\n    // show booking date selector\r\n    document.querySelectorAll(`.booking-subject-selector`).forEach(el=>el.addEventListener(`change`, (ev)=>{\r\n        Main.showModal(document.querySelector(`[name=\"${ev.target.value}-modal\"]`));\r\n    }));\r\n\r\n    // show booking calendar\r\n    document.querySelectorAll(`.admin-booking-subject-selector`).forEach(el=>el.addEventListener(`change`, (ev)=>{\r\n        document.querySelector(`.bookings-wrap[data-subject=\"${ev.target.value}\"]`).classList.toggle('hidden');\r\n    }));\r\n\r\n    document.querySelectorAll(\".tables-wrapper\").forEach(wrapper=>{\r\n        offset\t= wrapper.getBoundingClientRect().x;\r\n        wrapper.style.marginLeft = `-${offset}px`;\r\n    });\r\n\r\n    document.querySelectorAll('.booking-detail tr.actions').forEach(row=>row.addEventListener('submissionArchived', ev => {\r\n        let wrapper     = ev.target.closest('.booking-detail-wrapper');\r\n        let bookingId   = wrapper.dataset.bookingid;\r\n\r\n        // mark dates as available again\r\n        document.querySelectorAll(`.calendar.day.booked[data-bookingid=\"${bookingId}\"]`).forEach(el=>{\r\n            el.classList.remove('booked');\r\n            el.classList.add('available');\r\n        });\r\n\r\n        // remove details\r\n        wrapper.remove();\r\n        \r\n        Main.displayMessage('Succesfully archived');\r\n    }));\r\n});\r\n\r\ndocument.addEventListener('click', (ev) => {\r\n    let target  = ev.target;\r\n    let modal   = target.closest('.modal');\r\n\r\n    if(target.closest('dt') != null){\r\n        target  = target.closest('dt');\r\n    }\r\n\r\n    if(target.matches('.action.reset') ){\r\n        reset(modal, false, false);\r\n    }else if(target.matches('.available.unavailable')){\r\n        reset(modal);\r\n    }else if(target.matches('.prevnext')){\r\n        getMonth(target);\r\n    }else if(target.matches('.change-booking-date, [name=\"booking-startdate\"], [name=\"booking-enddate\"]')){\r\n        changeBookingData(target);\r\n    }else if(target.matches('.action.confirm')){\r\n        storeDates(target);\r\n    }else if(target.matches('.booking-subject-selector.overlap')){\r\n        if(target.value == 'yes'){\r\n            target.closest(`.formfieldlabel`).querySelector(`.min-bookking-gap-time`).classList.add('hidden');\r\n        }else{\r\n            target.closest(`.formfieldlabel`).querySelector(`.min-bookking-gap-time`).classList.remove('hidden');\r\n        }\r\n    }\r\n    \r\n    if(target.matches('.bookings-wrap .available:not(.unavailable)')){\r\n        daySelected(target);\r\n    }else if(target.matches('.form.table-wrapper .booked')){\r\n        // Hide others\r\n        target.closest('.bookings-wrap').querySelectorAll(`.booking-detail-wrapper:not(.hidden)`).forEach(el=>el.classList.add('hidden'));\r\n        \r\n        // Show the details\r\n        target.closest('.bookings-wrap').querySelectorAll(`.booking-detail-wrapper[data-bookingid=\"${target.dataset.bookingid}\"]`).forEach(el=>{\r\n            el.classList.remove('hidden');\r\n            el.scrollIntoView({block: \"center\"});\r\n        });\r\n    }else if(target.matches('.button.approve')){\r\n        approve(target);\r\n    }else if(target.matches('.button.delete')){\r\n        remove(target);\r\n    }else if(target.matches('.room-selector')){\r\n        roomSelected(target);\r\n    }else if(target.matches('.confirmed-roles-switcher')){\r\n        target.closest('.formfieldlabel').querySelectorAll('.confirmed-roles-wrapper').forEach(el=>el.classList.toggle('hidden'));\r\n    }\r\n});\r\n\r\ndocument.addEventListener('change', (ev) => {\r\n    if(ev.target.name.includes('default_booking_state')){\r\n        if(ev.target.value == 'pending' && ev.target.checked){\r\n            ev.target.closest('.formfield.formfieldlabel').querySelectorAll('button.confirmed-roles-switcher.hidden').forEach(but=>but.classList.remove('hidden'));\r\n        }else{\r\n            ev.target.closest('.formfield.formfieldlabel').querySelectorAll('button.confirmed-roles-switcher:not(.hidden)').forEach(but=>but.classList.add('hidden'));\r\n        }\r\n    }\r\n});"],"names":["reset","modal","onlyEnd","skipRoomSelector","querySelector","value","querySelectorAll","forEach","el","classList","remove","dt","add","checked","length","document","addEventListener","console","log","ev","Main","showModal","target","toggle","wrapper","offset","getBoundingClientRect","x","style","marginLeft","row","closest","bookingId","dataset","bookingid","displayMessage","matches","async","type","monthContainers","month","year","index","formData","FormData","append","subject","formid","undefined","elid","shortcodeid","loaderWrapper","createElement","setAttribute","loader","sim","loadingGif","insertAdjacentElement","position","div","clone","cloneNode","response","FormSubmit","fetchRestApi","outerHTML","months","insertAdjacentHTML","navigator","details","getMonth","selector","changeBookingData","parent","original","FormFunctions","startEl","endEl","roomEl","room","isodate","fixNumbering","hideModals","textContent","storeDates","roomWrapper","date","dts","skip","i","daySelected","scrollIntoView","block","id","cell","initContent","showLoader","rows","message","building","split","subjectWrapper","years","html","approve","roomSelected","name","includes","but"],"sourceRoot":""}