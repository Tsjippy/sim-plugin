{"version":3,"file":"bookings.min.js","mappings":"MAAA,SAASA,EAAMC,EAAOC,GAAQ,GACtBA,IACAD,EAAME,cAAc,sBAAsBC,MAAY,GACtDH,EAAME,cAAc,2BAA2BE,UAAUC,OAAO,aAChEL,EAAMM,iBAAiB,uBAAuBC,SAAQC,GAAIA,EAAGJ,UAAUC,OAAO,cAE9EL,EAAME,cAAc,uCAAuCE,UAAUK,IAAI,aAE7ET,EAAME,cAAc,oBAAoBC,MAAc,GAEtDH,EAAME,cAAc,yBAAyBE,UAAUC,OAAO,WAE9DL,EAAMM,iBAAiB,cAAcC,SAAQC,GAAIA,EAAGJ,UAAUC,OAAO,cACzE,CA6BAK,SAASC,iBAAiB,oBAAoB,KAC1CC,QAAQC,IAAI,sBAEZH,SAASR,cAAc,yBAAyBS,iBAAiB,UAAWG,IACxEJ,SAASR,cAAc,UAAUY,EAAGC,OAAOZ,iBAAiBC,UAAUC,OAAO,SAAS,GACxF,IAGNK,SAASC,iBAAiB,SAAUG,IAChC,IAAIC,EAAUD,EAAGC,OACbf,EAAUe,EAAOC,QAAQ,UAkB7B,GAhB2B,MAAxBD,EAAOC,QAAQ,QACdD,EAAUA,EAAOC,QAAQ,OAG1BD,EAAOE,QAAQ,kBACdlB,EAAMC,GAGPe,EAAOE,QAAQ,cA/CtBC,eAAwBH,GACpB,IAAII,EAAkBJ,EAAOC,QAAQ,kBACjCI,EAAkBD,EAAQjB,cAAc,gCAAgCa,EAAOM,QAAQC,sBAAsBP,EAAOM,QAAQE,UAMhI,GAHAJ,EAAQjB,cAAc,kDAAkDE,UAAUK,IAAI,UAGjE,MAAlBW,EAAuB,CACtB,IAAII,EAAc,IAAIC,SACtBD,EAASE,OAAO,QAASX,EAAOM,QAAQC,OACxCE,EAASE,OAAO,OAAQX,EAAOM,QAAQE,MACvCC,EAASE,OAAO,UAAWX,EAAOC,QAAQ,kBAAkBK,QAAQM,SAEpE,IAAIC,EAAUC,KAAKC,WAAWX,EAAQjB,cAAc,kDAAkD,GAElG6B,QAAiBC,WAAWC,aAAa,0BAA2BT,GAErEO,IACCH,EAAOM,UAA2CH,EAAST,MAC3DH,EAAQjB,cAAc,cAAcgC,UAAcH,EAASI,UAEnE,MACIf,EAAehB,UAAUC,OAAO,SAExC,CAuBQ+B,CAASrB,GAGVA,EAAOE,QAAQ,yBACdP,SAASR,cAAc,UAAUQ,SAASR,cAAc,yBAAyBC,iBAAiBC,UAAUC,OAAO,UAGpHU,EAAOE,QAAQ,mBAAmB,CACjC,IAAIoB,EAActB,EAAOC,QAAQ,QAAQd,cAAc,+BACnDoC,EAAcvB,EAAOC,QAAQ,QAAQd,cAAc,6BAEvDmC,EAAQlC,MAAUH,EAAME,cAAc,sBAAsBmB,QAAQkB,QACpED,EAAMnC,MAAYH,EAAME,cAAc,oBAAoBmB,QAAQkB,QAElEF,EAAQrB,QAAQ,2BAA2BZ,UAAUC,OAAO,UAE5DL,EAAMI,UAAUK,IAAI,UAEpBV,EAAMC,EACV,CAEA,GAAGe,EAAOE,QAAQ,4CAA4C,CAE1D,GAAqD,MAAlDjB,EAAME,cAAc,4BAAsF,MAAhDF,EAAME,cAAc,yBAAiC,CAC9G,IAAID,GAAU,EACXc,EAAOE,QAAQ,gBACdhB,GAAU,GAIdF,EAAMC,EAAOC,EACjB,CAEA,GAAqD,MAAlDD,EAAME,cAAc,2BAAmC,CACtDF,EAAME,cAAc,sBAAsBC,MAAoBY,EAAOM,QAAQmB,KAC7ExC,EAAME,cAAc,sBAAsBmB,QAAQkB,QAAYxB,EAAOM,QAAQkB,QAE7ExB,EAAOX,UAAUK,IAAI,aACrBT,EAAMM,iBAAiB,wCAAwCC,SAAQkC,GAAIA,EAAGrC,UAAUC,OAAO,cAG/F,IAAIqC,EAAU3B,EAAOC,QAAQ,mBAAmBV,iBAAiB,4CAC7DqC,GAAU,EACd,IAAKC,EAAI,EAAGA,EAAIF,EAAIG,SAAUD,EAEvBF,EAAIE,IAAM7B,EACT4B,GAAO,EAEFA,GAAQD,EAAIE,GAAG3B,QAAQ,eAC5B0B,GAAO,GAGPA,GACAD,EAAIE,GAAGxC,UAAUK,IAAI,WAGjC,KAAK,CAEDT,EAAME,cAAc,oBAAoBC,MAAsBY,EAAOM,QAAQmB,KAC7ExC,EAAME,cAAc,oBAAoBmB,QAAQkB,QAAcxB,EAAOM,QAAQkB,QAC7ExB,EAAOX,UAAUK,IAAI,WAGrBM,EAAOC,QAAQ,mBAAmBV,iBAAiB,uBAAuBC,SAAQC,GAAIA,EAAGJ,UAAUC,OAAO,cAG1G,IAAIqC,EAAU3B,EAAOC,QAAQ,mBAAmBV,iBAAiB,8BAC7DqC,GAAU,EACd,IAAKC,EAAI,EAAGA,EAAIF,EAAIG,QAGbH,EAAIE,IAAM7B,IAHa6B,EAOtBD,GACAD,EAAIE,GAAGxC,UAAUK,IAAI,aAItBiC,EAAIE,GAAG3B,QAAQ,gBACd0B,GAAO,GAIf3C,EAAMM,iBAAiB,6BAA6BC,SAAQkC,GAAIA,EAAGrC,UAAUC,OAAO,aACxF,CACJ,I","sources":["webpack://bookings/./bookings.js"],"sourcesContent":["function reset(modal, onlyEnd=false){\r\n    if(!onlyEnd){\r\n        modal.querySelector('.booking-startdate').value     = '';\r\n        modal.querySelector('.calendar.day.startdate').classList.remove('startdate');\r\n        modal.querySelectorAll('.available.selected').forEach(dt=>dt.classList.remove('selected'));\r\n\r\n        modal.querySelector('.booking-date-label-wrapper.enddate').classList.add('disabled')\r\n    }\r\n    modal.querySelector('.booking-enddate').value       = '';\r\n    \r\n    modal.querySelector('.calendar.day.enddate').classList.remove('enddate');\r\n\r\n    modal.querySelectorAll('.inbetween').forEach(dt=>dt.classList.remove('inbetween'));    \r\n}\r\n\r\nasync function getMonth(target){\r\n    let wrapper         = target.closest('.bookings-wrap');\r\n    let monthContainer  = wrapper.querySelector(`.month-container[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`);\r\n\r\n    // hide the first month\r\n    wrapper.querySelector('.calendar.table .month-container:first-of-type').classList.add('hidden');\r\n\r\n    // month does not exist yet\r\n    if(monthContainer == null){\r\n        let formData    = new FormData();\r\n        formData.append('month', target.dataset.month);\r\n        formData.append('year', target.dataset.year);\r\n        formData.append('subject', target.closest('.bookings-wrap').dataset.subject);\r\n\r\n        let loader  = Main.showLoader(wrapper.querySelector('.calendar.table .month-container:not(.hidden)'), false);\r\n            \r\n        let response = await FormSubmit.fetchRestApi('bookings/get_next_month', formData);\r\n\r\n        if(response){\r\n            loader.outerHTML                                = response.month;\r\n            wrapper.querySelector('.navigator').outerHTML   = response.navigator;\r\n        }\r\n    }else{\r\n        monthContainer.classList.remove('hidden');\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"Bookings.js loaded\");\r\n\r\n    document.querySelector(`[name=\"accomodation\"]`).addEventListener(`change`, (ev)=>{\r\n        document.querySelector(`[name=\"${ev.target.value}-modal\"]`).classList.remove('hidden');\r\n    });\r\n});\r\n\r\ndocument.addEventListener('click', (ev) => {\r\n    let target  = ev.target;\r\n    let modal   = target.closest('.modal');\r\n\r\n    if(target.closest('dt') != null){\r\n        target  = target.closest('dt');\r\n    }\r\n\r\n    if(target.matches('.action.reset')){\r\n        reset(modal);\r\n    }\r\n\r\n    if(target.matches('.prevnext')){\r\n        getMonth(target)\r\n    }\r\n\r\n    if(target.matches('.change-booking-date')){\r\n        document.querySelector(`[name=\"${document.querySelector(`[name=\"accomodation\"]`).value}-modal\"]`).classList.remove('hidden');\r\n    }\r\n\r\n    if(target.matches('.action.confirm')){\r\n        let startEl     = target.closest('form').querySelector('[name=\"booking[startdate]\"]');\r\n        let endEl       = target.closest('form').querySelector('[name=\"booking[enddate]\"]');\r\n\r\n        startEl.value   = modal.querySelector('.booking-startdate').dataset.isodate;\r\n        endEl.value     = modal.querySelector('.booking-enddate').dataset.isodate;\r\n\r\n        startEl.closest('.selected-booking-dates').classList.remove('hidden');\r\n\r\n        modal.classList.add('hidden');\r\n\r\n        reset(modal);\r\n    }\r\n\r\n    if(target.matches('.bookings-wrap .available:not(.selected)')){\r\n        // we already have an selection\r\n        if(modal.querySelector('.calendar.day.startdate') != null && modal.querySelector('.calendar.day.enddate') != null){\r\n            let onlyEnd = false;\r\n            if(target.matches('.inbetween')){\r\n                onlyEnd = true;\r\n\r\n            }\r\n            \r\n            reset(modal, onlyEnd);\r\n        }\r\n\r\n        if(modal.querySelector('.calendar.day.startdate') == null){\r\n            modal.querySelector('.booking-startdate').value             = target.dataset.date;\r\n            modal.querySelector('.booking-startdate').dataset.isodate   = target.dataset.isodate;\r\n\r\n            target.classList.add('startdate');\r\n            modal.querySelectorAll('.booking-date-label-wrapper.disabled').forEach(el=>el.classList.remove('disabled'));\r\n\r\n            // do not allow any date before the startdate to be the enddate\r\n            let dts     = target.closest('.calendar.table').querySelectorAll('dt.calendar.day:not(.head, .unavailable)');\r\n            let skip    = false;\r\n            for (i = 0; i < dts.length; ++i) {\r\n                // all dates after the selected date are available\r\n                if(dts[i] == target){\r\n                    skip = true;\r\n                // until we encounter another selected date\r\n                }else if(skip && dts[i].matches('.selected')){\r\n                    skip = false;\r\n                }\r\n\r\n                if(!skip){\r\n                    dts[i].classList.add('selected');\r\n                }\r\n            }\r\n        }else{\r\n            // store enddate\r\n            modal.querySelector('.booking-enddate').value               = target.dataset.date;\r\n            modal.querySelector('.booking-enddate').dataset.isodate     = target.dataset.isodate;\r\n            target.classList.add('enddate');\r\n\r\n            // make other dates available again\r\n            target.closest('.calendar.table').querySelectorAll('.available.selected').forEach(dt=>dt.classList.remove('selected'));\r\n\r\n            // color the dates between start and end\r\n            let dts     = target.closest('.calendar.table').querySelectorAll('dt.calendar.day:not(.head)');\r\n            let skip    = true;\r\n            for (i = 0; i < dts.length; ++i) {\r\n                \r\n                // until we encounter another selected date\r\n                if(dts[i] == target){\r\n                    break;\r\n                }\r\n\r\n                if(!skip){\r\n                    dts[i].classList.add('inbetween');\r\n                }\r\n\r\n                // all dates after the selected date are available\r\n                if(dts[i].matches('.startdate')){\r\n                    skip = false;\r\n                }\r\n            }\r\n\r\n            modal.querySelectorAll('.actions .action.disabled').forEach(el=>el.classList.remove('disabled'));\r\n        }\r\n    }\r\n});"],"names":["reset","modal","onlyEnd","querySelector","value","classList","remove","querySelectorAll","forEach","dt","add","document","addEventListener","console","log","ev","target","closest","matches","async","wrapper","monthContainer","dataset","month","year","formData","FormData","append","subject","loader","Main","showLoader","response","FormSubmit","fetchRestApi","outerHTML","navigator","getMonth","startEl","endEl","isodate","date","el","dts","skip","i","length"],"sourceRoot":""}