{"version":3,"file":"bookings.min.js","mappings":"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","sources":["webpack://bookings/./bookings.js"],"sourcesContent":["function reset(modal, onlyEnd=false){\r\n    if(!onlyEnd){\r\n        modal.querySelector('.booking-startdate').value     = '';\r\n        modal.querySelector('.calendar.day.startdate').classList.remove('startdate');\r\n        modal.querySelectorAll('.available.unavailable').forEach(dt=>dt.classList.remove('unavailable'));\r\n\r\n        modal.querySelector('.booking-date-label-wrapper.enddate').classList.add('disabled')\r\n    }\r\n    modal.querySelector('.booking-enddate').value       = '';\r\n    \r\n    modal.querySelector('.calendar.day.enddate').classList.remove('enddate');\r\n\r\n    modal.querySelectorAll('.inbetween').forEach(dt=>dt.classList.remove('inbetween'));    \r\n}\r\n\r\nasync function getMonth(target){\r\n    let wrapper         = target.closest('.bookings-wrap');\r\n    let monthContainer  = wrapper.querySelector(`.month-container[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`);\r\n\r\n    // hide the first month\r\n    if(target.closest('.prev') != null){\r\n        wrapper.querySelectorAll('.calendar.table .month-container:not(.hidden)')[1].classList.add('hidden');\r\n    }else{\r\n        wrapper.querySelectorAll('.calendar.table .month-container:not(.hidden)')[0].classList.add('hidden');\r\n    }\r\n\r\n    // month does not exist yet\r\n    if(monthContainer == null){\r\n        let formData    = new FormData();\r\n        formData.append('month', target.dataset.month);\r\n        formData.append('year', target.dataset.year);\r\n        formData.append('subject', target.closest('.bookings-wrap').dataset.subject);\r\n        formData.append('shortcodeid', target.closest('.bookings-wrap').dataset.shortcodeid);\r\n\r\n        let loaderWrapper\t= document.createElement(\"DIV\");\r\n        loaderWrapper.setAttribute('class','loaderwrapper');\r\n\r\n        let loader\t= document.createElement(\"IMG\");\r\n        loader.setAttribute(\"src\", sim.loadingGif);\r\n\r\n        loaderWrapper.insertAdjacentElement('beforeEnd', loader);\r\n        wrapper.querySelector('.calendar.table').insertAdjacentElement('beforeEnd', loaderWrapper);\r\n            \r\n        let response = await FormSubmit.fetchRestApi('bookings/get_next_month', formData);\r\n\r\n        if(response){\r\n            loaderWrapper.outerHTML                                = response.month;\r\n            // hide current navigator and add new one\r\n            wrapper.querySelector('.navigators .navigator:not(.hidden)').classList.add('hidden');\r\n            wrapper.querySelector('.navigators').insertAdjacentHTML('beforeEnd', response.navigator);\r\n            wrapper.querySelector('.booking.details-wrapper').insertAdjacentHTML('beforeEnd', response.details);\r\n        }\r\n    }else{\r\n        // hide the current navigator\r\n        wrapper.querySelector('.navigators .navigator:not(.hidden)').classList.add('hidden');\r\n\r\n        // show the new one\r\n        console.log(wrapper);\r\n        console.log(target);\r\n        wrapper.querySelector(`.navigator[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`).classList.remove('hidden');\r\n        \r\n        // Show the month calendar\r\n        monthContainer.classList.remove('hidden');\r\n    }\r\n}\r\n\r\nfunction changeBookingData(target){\r\n    let selector    = '';\r\n    let el  = document.querySelector(`.booking-subject-selector`);\r\n    if(el == null){\r\n        selector    = '.booking.modal';\r\n    }else{\r\n        selector    = `[name=\"${el.value}-modal\"]`;\r\n    }\r\n    document.querySelector(selector).classList.remove('hidden');\r\n}\r\n\r\nfunction storeDates(target){\r\n    let modal   = target.closest('.modal');\r\n    \r\n    let startEl     = target.closest('form').querySelector('[name=\"booking-startdate\"]');\r\n    let endEl       = target.closest('form').querySelector('[name=\"booking-enddate\"]');\r\n\r\n    startEl.value   = modal.querySelector('.booking-startdate').dataset.isodate;\r\n    endEl.value     = modal.querySelector('.booking-enddate').dataset.isodate;\r\n\r\n    startEl.closest('.selected-booking-dates').classList.remove('hidden');\r\n\r\n    Main.hideModals();\r\n\r\n    target.closest('form').querySelector('.change-booking-date').textContent    = 'Change';\r\n\r\n    reset(modal);\r\n}\r\n\r\nfunction daySelected(target){ \r\n    let modal   = target.closest('.modal');\r\n\r\n    if(modal == null){\r\n        return;\r\n    }\r\n\r\n    // we already have an selection\r\n    if(modal.querySelector('.calendar.day.startdate') != null && modal.querySelector('.calendar.day.enddate') != null){\r\n        let onlyEnd = false;\r\n        if(target.matches('.inbetween')){\r\n            onlyEnd = true;\r\n        }\r\n        \r\n        reset(modal, onlyEnd);\r\n    }\r\n\r\n    if(modal.querySelector('.calendar.day.startdate') == null){\r\n        modal.querySelector('.booking-startdate').value             = target.dataset.date;\r\n        modal.querySelector('.booking-startdate').dataset.isodate   = target.dataset.isodate;\r\n\r\n        target.classList.add('startdate');\r\n        modal.querySelectorAll('.booking-date-label-wrapper.disabled').forEach(el=>el.classList.remove('disabled'));\r\n\r\n        // do not allow any date before the startdate to be the enddate\r\n        let dts     = target.closest('.calendar.table').querySelectorAll('dt.calendar.day:not(.head, .unavailable)');\r\n        let skip    = false;\r\n        for (i = 0; i < dts.length; ++i) {\r\n            // all dates after the booked date are available\r\n            if(dts[i] == target){\r\n                skip = true;\r\n            // until we encounter another booked date\r\n            }else if(skip && dts[i].matches('.booked:not(.available)')){\r\n                skip = false;\r\n            }\r\n\r\n            if(!skip){\r\n                dts[i].classList.add('unavailable');\r\n            }\r\n        }\r\n    }else{\r\n        // store enddate\r\n        modal.querySelector('.booking-enddate').value               = target.dataset.date;\r\n        modal.querySelector('.booking-enddate').dataset.isodate     = target.dataset.isodate;\r\n        target.classList.add('enddate');\r\n\r\n        // make other dates available again\r\n        target.closest('.calendar.table').querySelectorAll('.available.booked:not(.enddate, .startdate)').forEach(dt=>dt.classList.remove('booked'));\r\n\r\n        // color the dates between start and end\r\n        let dts     = target.closest('.calendar.table').querySelectorAll('dt.calendar.day:not(.head)');\r\n        let skip    = true;\r\n        for (i = 0; i < dts.length; ++i) {\r\n            \r\n            // until we encounter another booked date\r\n            if(dts[i] == target){\r\n                break;\r\n            }\r\n\r\n            if(!skip){\r\n                dts[i].classList.add('inbetween');\r\n            }\r\n\r\n            // all dates after the booked date are available\r\n            if(dts[i].matches('.startdate')){\r\n                skip = false;\r\n            }\r\n        }\r\n\r\n        modal.querySelectorAll('.actions .action.disabled').forEach(el=>el.classList.remove('disabled'));\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"Bookings.js loaded\");\r\n\r\n    // show booking date selector\r\n    document.querySelectorAll(`.booking-subject-selector`).forEach(el=>el.addEventListener(`change`, (ev)=>{\r\n        Main.showModal(document.querySelector(`[name=\"${ev.target.value}-modal\"]`));\r\n    }));\r\n\r\n    // show booking calendar\r\n    document.querySelectorAll(`.admin-booking-subject-selector`).forEach(el=>el.addEventListener(`change`, (ev)=>{\r\n        document.querySelector(`.bookings-wrap[data-subject=\"${ev.target.value}\"]`).classList.toggle('hidden');\r\n    }));\r\n\r\n    document.querySelectorAll(\".tables-wrapper\").forEach(wrapper=>{\r\n        offset\t= wrapper.getBoundingClientRect().x;\r\n        wrapper.style.marginLeft = `-${offset}px`;\r\n    });\r\n});\r\n\r\ndocument.addEventListener('click', (ev) => {\r\n    let target  = ev.target;\r\n    let modal   = target.closest('.modal');\r\n\r\n    if(target.closest('dt') != null){\r\n        target  = target.closest('dt');\r\n    }\r\n\r\n    if(target.matches('.action.reset')){\r\n        reset(modal);\r\n    }\r\n\r\n    if(target.matches('.prevnext')){\r\n        getMonth(target);\r\n    }\r\n\r\n    if(target.matches('.change-booking-date, [name=\"booking-startdate\"], [name=\"booking-enddate\"]')){\r\n        changeBookingData(target);\r\n    }\r\n\r\n    if(target.matches('.action.confirm')){\r\n        storeDates(target);\r\n    }\r\n\r\n    if(target.matches('.bookings-wrap .available:not(.unavailable)')){\r\n        daySelected(target);\r\n    }\r\n\r\n    if(target.matches('.form.table-wrapper .booked')){\r\n        // Hide others\r\n        target.closest('.bookings-wrap').querySelectorAll(`.booking-detail-wrapper:not(.hidden)`).forEach(el=>el.classList.add('hidden'));\r\n        \r\n        // Show the details\r\n        target.closest('.bookings-wrap').querySelector(`.booking-detail-wrapper[data-bookingid=\"${target.dataset.bookingid}\"]`).classList.remove('hidden');\r\n    }\r\n});"],"names":["reset","modal","onlyEnd","querySelector","value","classList","remove","querySelectorAll","forEach","dt","add","document","addEventListener","console","log","el","ev","Main","showModal","target","toggle","wrapper","offset","getBoundingClientRect","x","style","marginLeft","closest","matches","async","monthContainer","dataset","month","year","formData","FormData","append","subject","shortcodeid","loaderWrapper","createElement","setAttribute","loader","sim","loadingGif","insertAdjacentElement","response","FormSubmit","fetchRestApi","outerHTML","insertAdjacentHTML","navigator","details","getMonth","selector","changeBookingData","startEl","endEl","isodate","hideModals","textContent","storeDates","date","dts","skip","i","length","daySelected","bookingid"],"sourceRoot":""}