{"version":3,"file":"bookings.min.js","mappings":"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","sources":["webpack://bookings/./bookings.js"],"sourcesContent":["function reset(modal, onlyEnd=false){\r\n    if(!onlyEnd){\r\n        modal.querySelector('.booking-startdate').value     = '';\r\n        modal.querySelector('.calendar.day.startdate').classList.remove('startdate');\r\n        modal.querySelectorAll('.available.selected').forEach(dt=>dt.classList.remove('selected'));\r\n\r\n        modal.querySelector('.booking-date-label-wrapper.enddate').classList.add('disabled')\r\n    }\r\n    modal.querySelector('.booking-enddate').value       = '';\r\n    \r\n    modal.querySelector('.calendar.day.enddate').classList.remove('enddate');\r\n\r\n    modal.querySelectorAll('.inbetween').forEach(dt=>dt.classList.remove('inbetween'));    \r\n}\r\n\r\nasync function getMonth(target){\r\n    let wrapper         = target.closest('.bookings-wrap');\r\n    let monthContainer  = wrapper.querySelector(`.month-container[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`);\r\n\r\n    // hide the first month\r\n    if(target.closest('.prev') != null){\r\n        wrapper.querySelectorAll('.calendar.table .month-container:not(.hidden)')[1].classList.add('hidden');\r\n    }else{\r\n        wrapper.querySelectorAll('.calendar.table .month-container:not(.hidden)')[0].classList.add('hidden');\r\n    }\r\n\r\n    // month does not exist yet\r\n    if(monthContainer == null){\r\n        let formData    = new FormData();\r\n        formData.append('month', target.dataset.month);\r\n        formData.append('year', target.dataset.year);\r\n        formData.append('subject', target.closest('.bookings-wrap').dataset.subject);\r\n\r\n        let loaderWrapper\t= document.createElement(\"DIV\");\r\n        loaderWrapper.setAttribute('class','loaderwrapper');\r\n\r\n        let loader\t= document.createElement(\"IMG\");\r\n        loader.setAttribute(\"src\", sim.loadingGif);\r\n\r\n        loaderWrapper.insertAdjacentElement('beforeEnd', loader);\r\n        wrapper.querySelector('.calendar.table').insertAdjacentElement('beforeEnd', loaderWrapper);\r\n            \r\n        let response = await FormSubmit.fetchRestApi('bookings/get_next_month', formData);\r\n\r\n        if(response){\r\n            loaderWrapper.outerHTML                                = response.month;\r\n            // hide current navigator and add new one\r\n            wrapper.querySelector('.navigators .navigator:not(.hidden)').classList.add('hidden');\r\n            wrapper.querySelector('.navigators').insertAdjacentHTML('beforeEnd', response.navigator);\r\n            wrapper.querySelector('.booking.details-wrapper').insertAdjacentHTML('beforeEnd', response.details);\r\n        }\r\n    }else{\r\n        wrapper.querySelector('.navigators .navigator:not(.hidden)').classList.add('hidden');\r\n        wrapper.querySelector(`.navigator[data-month=\"${target.dataset.month}\"][data-year=\"${target.dataset.year}\"]`).classList.remove('hidden');\r\n        monthContainer.classList.remove('hidden');\r\n    }\r\n}\r\n\r\nfunction changeBookingData(target){\r\n    let selector    = '';\r\n    let el  = document.querySelector(`.booking-subject-selector`);\r\n    if(el == null){\r\n        selector    = '.booking.modal';\r\n    }else{\r\n        selector    = `[name=\"${el.value}-modal\"]`;\r\n    }\r\n    document.querySelector(selector).classList.remove('hidden');\r\n}\r\n\r\nfunction storeDates(target){\r\n    let modal   = target.closest('.modal');\r\n    \r\n    let startEl     = target.closest('form').querySelector('[name=\"booking-startdate\"]');\r\n    let endEl       = target.closest('form').querySelector('[name=\"booking-enddate\"]');\r\n\r\n    startEl.value   = modal.querySelector('.booking-startdate').dataset.isodate;\r\n    endEl.value     = modal.querySelector('.booking-enddate').dataset.isodate;\r\n\r\n    startEl.closest('.selected-booking-dates').classList.remove('hidden');\r\n\r\n    modal.classList.add('hidden');\r\n\r\n    target.closest('form').querySelector('.change-booking-date').textContent    = 'Change';\r\n\r\n    reset(modal);\r\n}\r\n\r\nfunction showDateSelectorModal(target){ \r\n    let modal   = target.closest('.modal');\r\n\r\n    if(modal == null){\r\n        return;\r\n    }\r\n\r\n    // we already have an selection\r\n    if(modal.querySelector('.calendar.day.startdate') != null && modal.querySelector('.calendar.day.enddate') != null){\r\n        let onlyEnd = false;\r\n        if(target.matches('.inbetween')){\r\n            onlyEnd = true;\r\n        }\r\n        \r\n        reset(modal, onlyEnd);\r\n    }\r\n\r\n    if(modal.querySelector('.calendar.day.startdate') == null){\r\n        modal.querySelector('.booking-startdate').value             = target.dataset.date;\r\n        modal.querySelector('.booking-startdate').dataset.isodate   = target.dataset.isodate;\r\n\r\n        target.classList.add('startdate');\r\n        modal.querySelectorAll('.booking-date-label-wrapper.disabled').forEach(el=>el.classList.remove('disabled'));\r\n\r\n        // do not allow any date before the startdate to be the enddate\r\n        let dts     = target.closest('.calendar.table').querySelectorAll('dt.calendar.day:not(.head, .unavailable)');\r\n        let skip    = false;\r\n        for (i = 0; i < dts.length; ++i) {\r\n            // all dates after the selected date are available\r\n            if(dts[i] == target){\r\n                skip = true;\r\n            // until we encounter another selected date\r\n            }else if(skip && dts[i].matches('.selected')){\r\n                skip = false;\r\n            }\r\n\r\n            if(!skip){\r\n                dts[i].classList.add('selected');\r\n            }\r\n        }\r\n    }else{\r\n        // store enddate\r\n        modal.querySelector('.booking-enddate').value               = target.dataset.date;\r\n        modal.querySelector('.booking-enddate').dataset.isodate     = target.dataset.isodate;\r\n        target.classList.add('enddate');\r\n\r\n        // make other dates available again\r\n        target.closest('.calendar.table').querySelectorAll('.available.selected').forEach(dt=>dt.classList.remove('selected'));\r\n\r\n        // color the dates between start and end\r\n        let dts     = target.closest('.calendar.table').querySelectorAll('dt.calendar.day:not(.head)');\r\n        let skip    = true;\r\n        for (i = 0; i < dts.length; ++i) {\r\n            \r\n            // until we encounter another selected date\r\n            if(dts[i] == target){\r\n                break;\r\n            }\r\n\r\n            if(!skip){\r\n                dts[i].classList.add('inbetween');\r\n            }\r\n\r\n            // all dates after the selected date are available\r\n            if(dts[i].matches('.startdate')){\r\n                skip = false;\r\n            }\r\n        }\r\n\r\n        modal.querySelectorAll('.actions .action.disabled').forEach(el=>el.classList.remove('disabled'));\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"Bookings.js loaded\");\r\n\r\n    // show booking date selector\r\n    document.querySelectorAll(`.booking-subject-selector`).forEach(el=>el.addEventListener(`change`, (ev)=>{\r\n        document.querySelector(`[name=\"${ev.target.value}-modal\"]`).classList.remove('hidden');\r\n    }));\r\n\r\n    // show booking calendar\r\n    document.querySelectorAll(`.admin-booking-subject-selector`).forEach(el=>el.addEventListener(`change`, (ev)=>{\r\n        document.querySelector(`.bookings-wrap[data-subject=\"${ev.target.value}\"]`).classList.toggle('hidden');\r\n    }));\r\n\r\n    document.querySelectorAll(\".tables-wrapper\").forEach(wrapper=>{\r\n        offset\t= wrapper.getBoundingClientRect().x;\r\n        wrapper.style.marginLeft = `-${offset}px`;\r\n    });\r\n});\r\n\r\ndocument.addEventListener('click', (ev) => {\r\n    let target  = ev.target;\r\n    let modal   = target.closest('.modal');\r\n\r\n    if(target.closest('dt') != null){\r\n        target  = target.closest('dt');\r\n    }\r\n\r\n    if(target.matches('.action.reset')){\r\n        reset(modal);\r\n    }\r\n\r\n    if(target.matches('.prevnext')){\r\n        getMonth(target);\r\n    }\r\n\r\n    if(target.matches('.change-booking-date')){\r\n        changeBookingData(target);\r\n    }\r\n\r\n    if(target.matches('.action.confirm')){\r\n        storeDates(target);\r\n    }\r\n\r\n    if(target.matches('.bookings-wrap .available:not(.selected)')){\r\n        showDateSelectorModal(target);\r\n    }\r\n\r\n    if(target.matches('.form.table-wrapper .selected')){\r\n        // Show the details\r\n        target.closest('.bookings-wrap').querySelector(`.booking-detail-wrapper[data-bookingid=\"${target.dataset.bookingid}\"]`).classList.remove('hidden');\r\n    }\r\n\r\n    if(target.matches('.booking-detail .edit')){\r\n        console.log(target)\r\n    }\r\n});"],"names":["reset","modal","onlyEnd","querySelector","value","classList","remove","querySelectorAll","forEach","dt","add","document","addEventListener","console","log","el","ev","target","toggle","wrapper","offset","getBoundingClientRect","x","style","marginLeft","closest","matches","async","monthContainer","dataset","month","year","formData","FormData","append","subject","loaderWrapper","createElement","setAttribute","loader","sim","loadingGif","insertAdjacentElement","response","FormSubmit","fetchRestApi","outerHTML","insertAdjacentHTML","navigator","details","getMonth","selector","changeBookingData","startEl","endEl","isodate","textContent","storeDates","date","dts","skip","i","length","showDateSelectorModal","bookingid"],"sourceRoot":""}