{"version":3,"file":"2fa.min.js","mappings":"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","sources":["webpack://login/./node_modules/@web-auth/webauthn-helper/src/common.js","webpack://login/./2fa.js","webpack://login/./node_modules/@web-auth/webauthn-helper/src/useRegistration.js"],"sourcesContent":["// Predefined fetch function\nexport const fetchEndpoint = (data, url, header) => {\n  return fetch(\n      url,\n      {\n        method: 'POST',\n        credentials: 'same-origin',\n        redirect: 'error',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          ...header\n        },\n        body: JSON.stringify(data),\n      }\n  );\n} \n\n\n// Decodes a Base64Url string\nconst base64UrlDecode = (input) => {\n  input = input\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n  const pad = input.length % 4;\n  if (pad) {\n    if (pad === 1) {\n      throw new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\n    }\n    input += new Array(5-pad).join('=');\n  }\n\n  return window.atob(input);\n};\n\n// Converts an array of bytes into a Base64Url string\nconst arrayToBase64String = (a) => btoa(String.fromCharCode(...a));\n\n// Prepares the public key options object returned by the Webauthn Framework\nexport const preparePublicKeyOptions = publicKey => {\n  //Convert challenge from Base64Url string to Uint8Array\n  publicKey.challenge = Uint8Array.from(\n      base64UrlDecode(publicKey.challenge),\n      c => c.charCodeAt(0)\n  );\n\n  //Convert the user ID from Base64 string to Uint8Array\n  if (publicKey.user !== undefined) {\n    publicKey.user = {\n      ...publicKey.user,\n      id: Uint8Array.from(\n          window.atob(publicKey.user.id),\n          c => c.charCodeAt(0)\n      ),\n    };\n  }\n\n  //If excludeCredentials is defined, we convert all IDs to Uint8Array\n  if (publicKey.excludeCredentials !== undefined) {\n    publicKey.excludeCredentials = publicKey.excludeCredentials.map(\n        data => {\n          return {\n            ...data,\n            id: Uint8Array.from(\n                base64UrlDecode(data.id),\n                c => c.charCodeAt(0)\n            ),\n          };\n        }\n    );\n  }\n\n  if (publicKey.allowCredentials !== undefined) {\n    publicKey.allowCredentials = publicKey.allowCredentials.map(\n        data => {\n          return {\n            ...data,\n            id: Uint8Array.from(\n                base64UrlDecode(data.id),\n                c => c.charCodeAt(0)\n            ),\n          };\n        }\n    );\n  }\n\n  return publicKey;\n};\n\n// Prepares the public key credentials object returned by the authenticator\nexport const preparePublicKeyCredentials = data => {\n  const publicKeyCredential = {\n    id: data.id,\n    type: data.type,\n    rawId: arrayToBase64String(new Uint8Array(data.rawId)),\n    response: {\n      clientDataJSON: arrayToBase64String(\n          new Uint8Array(data.response.clientDataJSON)\n      ),\n    },\n  };\n\n  if (data.response.attestationObject !== undefined) {\n    publicKeyCredential.response.attestationObject = arrayToBase64String(\n        new Uint8Array(data.response.attestationObject)\n    );\n  }\n\n  if (data.response.authenticatorData !== undefined) {\n    publicKeyCredential.response.authenticatorData = arrayToBase64String(\n        new Uint8Array(data.response.authenticatorData)\n    );\n  }\n\n  if (data.response.signature !== undefined) {\n    publicKeyCredential.response.signature = arrayToBase64String(\n        new Uint8Array(data.response.signature)\n    );\n  }\n\n  if (data.response.userHandle !== undefined) {\n    publicKeyCredential.response.userHandle = arrayToBase64String(\n        new Uint8Array(data.response.userHandle)\n    );\n  }\n\n  return publicKeyCredential;\n};\n","// Import the registration hook\r\nimport useRegistration from './node_modules/@web-auth/webauthn-helper/src/useRegistration.js';\r\n\r\nwindow['saved2fa'] = function(result,responsdata){\r\n\tif (result.status >= 200 && result.status < 400) {\r\n        document.querySelectorAll('[id^=\"setup-\"]:not(.hidden)').forEach(el=>el.classList.add('hidden'));\r\n\t}\r\n}\r\n\r\nfunction check_webauthn_available(){\r\n\tif (window.PublicKeyCredential) {\r\n\t\tPublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then((available) => {\r\n\t\t\tif (available) {\r\n\t\t\t\tconsole.log(\"Supported.\");\r\n\t\t\t\tdocument.getElementById('webauthn_wrapper').classList.remove('hidden');\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"WebAuthn supported, Platform Authenticator not supported.\");\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err) => console.log(\"Something went wrong.\"));\r\n\t} else {\r\n\t\tconsole.log(\"Not supported.\");\r\n\t}\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\",function() {\r\n\tconsole.log(\"2fa.js loaded\");\r\n\r\n\t//hide the webauthn table if not possible\r\n\tvar el = document.getElementById('webauthn_wrapper');\r\n\tif(el != null){\r\n\t\tcheck_webauthn_available();\r\n\t}\r\n\r\n\tdocument.querySelectorAll('.twofa_option_checkbox').forEach(el=>el.addEventListener('click', show_2fa_setup));\r\n\t\r\n\tdocument.querySelectorAll('.remove_webauthn').forEach(el=>el.addEventListener('click',remove_web_authenticator));\r\n\r\n\tdocument.querySelectorAll('#add_fingerprint').forEach(el=>el.addEventListener('click',register_fingerprint));\r\n});\r\n\r\nfunction show_2fa_setup(event) {\r\n\tvar target\t= event.target;\r\n\r\n\t//hide all options\r\n\tdocument.querySelectorAll('.twofa_option').forEach(el=>el.classList.add('hidden'));\r\n\r\n\t// Show setup for this method\r\n\tvar wrapper\t= document.getElementById('setup-'+target.value);\r\n\twrapper.classList.remove('hidden');\r\n\r\n\tif (isMobileDevice()){\r\n\t\twrapper.querySelectorAll('.mobile.hidden').forEach(el=>el.classList.remove('hidden'));\r\n\t}else{\r\n\t\twrapper.querySelectorAll('.desktop.hidden').forEach(el=>el.classList.remove('hidden'));\r\n\t}\r\n\r\n\t//Show submit button\r\n\ttarget.closest('form').querySelector('.form_submit').classList.remove('hidden');\r\n}\r\n\r\n// Register a new fingerprint\r\nconst register = useRegistration(\r\n  {\r\n    actionUrl: sim.base_url+'/wp-json/sim/v1/store_fingerprint',\r\n    optionsUrl: sim.base_url+'/wp-json/sim/v1/fingerprint_options',\r\n    actionHeader:{'X-WP-Nonce': sim.restnonce}\r\n  },\r\n  {\r\n    'X-WP-Nonce': sim.restnonce\r\n  }\r\n);\r\n\r\nfunction remove_web_authenticator(event){\r\n\tvar target  = event.target;\r\n\tvar table   = target.closest('table');\r\n\tvar row     = target.closest('tr');\r\n\r\n\tvar formData\t= new FormData();\r\n\tformData.append('action','remove_web_authenticator');\r\n\tformData.append('key',target.dataset.key);\r\n\r\n\tshowLoader(target, true);\r\n\r\n\tfetch(sim.ajax_url, {\r\n\t\tmethod: 'POST',\r\n\t\tcredentials: 'same-origin',\r\n\t\tbody: formData\r\n\t})\r\n\t.then((response) => {\r\n\t\tif(response.ok){\r\n\t\t\tif(table.rows.length==2){\r\n\t\t\ttable.remove();\r\n\t\t\t}else{\r\n\t\t\trow.remove();\r\n\t\t\t}\r\n\t\t}\r\n\t\tresponse.text();\r\n\t})\r\n\t.then((response) => display_message(response))\r\n}\r\n\r\n//Start registration with button click\r\nfunction register_fingerprint(event){\r\n    var identifier  = event.target.closest('#webauthn_wrapper').querySelector('[name=\"identifier\"]').value;\r\n    if(identifier == ''){\r\n      display_message('Please specify a device name', 'error');\r\n      return;\r\n    }\r\n\r\n    //show loader\r\n    document.getElementById('add_webauthn').classList.add('hidden');\r\n    var loader_html = `<div id=\"loader_wrapper\" style='margin-bottom:20px;'><span class=\"message\">Please authenticate...</span><img class=\"loadergif\" src=\"${sim.loading_gif}\" height=\"30px;\"></div>`;\r\n    document.getElementById('add_webauthn').insertAdjacentHTML('afterEnd',loader_html);\r\n\r\n    register({\r\n      identifier: identifier,\r\n    })\r\n    //registering succesfull\r\n    .then((response) => {\r\n      var wrapper = document.getElementById('webautn_devices_wrapper');\r\n\r\n      //add authenthn table\r\n      if(wrapper == null){\r\n        document.getElementById('webauthn_wrapper').insertAdjacentHTML('beforeEnd',response)\r\n      }else{\r\n        wrapper.outerHTML = response;\r\n      }\r\n\r\n      //labels for use\r\n      setTableLabel();\r\n\r\n      display_message('Registration success', 'success');\r\n    })\r\n    .catch((error) => {\r\n      document.getElementById('add_webauthn').classList.remove('hidden');\r\n      display_message('Registration failure: '+error['message'], 'error'); \r\n      console.error(error) }\r\n    )\r\n    .finally(()=>{\r\n      //remove loader\r\n      document.querySelector('#loader_wrapper').remove();\r\n    })\r\n}","import {\n    fetchEndpoint,\n    preparePublicKeyCredentials,\n    preparePublicKeyOptions,\n} from './common.js';\n\nconst useRegistration = ({actionUrl = '/register', actionHeader = {}, optionsUrl = '/register/options'}, optionsHeader = {}) => {\n    return async (data) => {\n        const optionsResponse = await fetchEndpoint(data, optionsUrl, optionsHeader);\n        const json = await optionsResponse.json();\n        const publicKey = preparePublicKeyOptions(json);\n        const credentials = await navigator.credentials.create({publicKey});\n\t\tdocument.querySelector('#loader_wrapper .message').textContent  = 'Saving authenticator...';\n        const publicKeyCredential = preparePublicKeyCredentials(credentials);\n        const actionResponse = await fetchEndpoint(publicKeyCredential, actionUrl, actionHeader);\n        if (! actionResponse.ok) {\n            throw actionResponse;\n        }\n        const responseBody = await actionResponse.text();\n\n        return responseBody !== '' ? JSON.parse(responseBody) : responseBody;\n    };\n};\n\nexport default useRegistration;\n"],"names":["fetchEndpoint","data","url","header","fetch","method","credentials","redirect","headers","body","JSON","stringify","base64UrlDecode","input","pad","replace","length","Error","Array","join","window","atob","arrayToBase64String","a","btoa","String","fromCharCode","show_2fa_setup","event","target","document","querySelectorAll","forEach","el","classList","add","wrapper","getElementById","value","remove","isMobileDevice","closest","querySelector","result","responsdata","status","addEventListener","console","log","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","then","available","catch","err","remove_web_authenticator","register_fingerprint","register","actionUrl","actionHeader","optionsUrl","optionsHeader","async","optionsResponse","publicKey","challenge","Uint8Array","from","c","charCodeAt","undefined","user","id","excludeCredentials","map","allowCredentials","preparePublicKeyOptions","json","navigator","create","textContent","publicKeyCredential","type","rawId","response","clientDataJSON","attestationObject","authenticatorData","signature","userHandle","preparePublicKeyCredentials","actionResponse","ok","responseBody","text","parse","sim","base_url","restnonce","table","row","formData","FormData","append","dataset","key","showLoader","ajax_url","rows","display_message","identifier","loader_html","loading_gif","insertAdjacentHTML","outerHTML","setTableLabel","error","finally"],"sourceRoot":""}