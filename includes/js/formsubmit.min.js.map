{"version":3,"file":"formsubmit.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,IARvB,CASGK,MAAM,WACT,OCVAC,QAAQC,IAAI,qB","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./form_submit.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"formsubmit\"] = factory();\n\telse\n\t\troot[\"formsubmit\"] = factory();\n})(self, function() {\nreturn ","console.log('formsubmit loaded');\r\n\r\nfunction formReset(form){\r\n\t//reset form to the default\r\n\tform.reset();\r\n\r\n\t//hide loaders\r\n\tform.querySelectorAll('.loadergif').forEach(el=>el.classList.add('hidden'));\r\n\r\n\t//hide button again if needed\r\n\tform.querySelectorAll('.multistepcontrols .form_submit').forEach(el=>el.classList.add('hidden'));\r\n\t\r\n\t//fix required fields\r\n\tform.querySelectorAll('[required]').forEach(el=>{el.required = false;});\r\n\t\r\n\t//empty any fileuploads\r\n\tform.querySelectorAll('.file_upload').forEach(el=>el.value='');\r\n\r\n\t//show hidden file uploads\r\n\tform.querySelectorAll('.upload_div.hidden').forEach(el=>el.classList.remove('hidden'));\r\n\t\r\n\t//Reset nice selects\r\n\tform.querySelectorAll('select').forEach(el=>el._niceselect.update());\r\n\t\r\n\t//remove doc previews\r\n\tdocument.querySelectorAll('.documentpreview .document').forEach(el=>el.remove());\r\n\t\r\n\tif(form.querySelector('.formstep') != null){\r\n\t\t//mark all circles as not active anymore\r\n\t\tform.querySelectorAll('.multistepcontrols .step.finish').forEach(el=>el.classList.remove('finish'));\r\n\t\r\n\t\t//go back to the first part of the form in case of multistep\r\n\t\tcurrentTab = 0;\r\n\t\tformFunctions.showTab(currentTab,form);\r\n\t}\r\n}\r\n\r\nasync function submitForm(form, url){\t\r\n\tvar validity = true;\r\n\t\r\n\t//first get all hidden required inputs and unrequire them\r\n\tform.querySelectorAll('.hidden [required]').forEach(el=>{el.required = false});\r\n\t\r\n\tvalidity\t= form.reportValidity();\r\n\r\n\t//only continue if valid\r\n\tif(validity){\r\n\t\t//Display loader\r\n\t\tform.querySelectorAll('.submit_wrapper .loadergif').forEach(loader=>loader.classList.remove('hidden'));\r\n\t\t\r\n\t\t//save any tinymce forms\r\n\t\tif (typeof tinymce !== 'undefined') {\r\n\t\t\ttinymce.get().forEach((tn)=>tn.save());\r\n\t\t}\r\n\t\t\r\n\t\tformdata = new FormData(form);\r\n\r\n\t\tif(form.dataset.addempty == 'true'){\r\n\t\t\t//also append at least one off all checkboxes\r\n\t\t\tform.querySelectorAll('input[type=\"checkbox\"]:not(:checked)').forEach(checkbox=>{\r\n\t\t\t\t//if no checkbox with this name exist yet\r\n\t\t\t\tif(!formdata.has(checkbox.name)){\r\n\t\t\t\t\tformdata.append(checkbox.name,'');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar response = await fetchRestApi(url, formdata);\r\n\r\n\t\tform.querySelectorAll('.submit_wrapper .loadergif').forEach(loader => loader.classList.add('hidden'));\r\n\r\n\t\treturn response;\r\n\t}else{\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nasync function fetchRestApi(url, formdata){\r\n\tformdata.append('_wpnonce', sim.restnonce);\r\n\r\n\tvar result = await fetch(\r\n\t\tsim.base_url+'/wp-json/sim/v1/'+url,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\tcredentials: 'same-origin',\r\n\t\t\tbody: formdata\r\n\t\t}\r\n\t);\r\n\r\n\tvar response\t= await result.json();\r\n\r\n\tif(result.ok){\r\n\t\treturn response;\r\n\t}else{\r\n\t\tconsole.error(response);\r\n\t\tdisplay_message(response.message, 'error');\r\n\t\treturn false;\r\n\t};\r\n}"],"names":["root","factory","exports","module","define","amd","self","console","log"],"sourceRoot":""}